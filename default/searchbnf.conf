# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)

[decodeheader-command]
syntax = DECODEHEADER INPUTFIELD=<fieldname> OUTPUTFIELD=<fieldname>
alias =
shortdesc = Decode an encoded smtp header value
description = \
    This command decodes an encoded smtp header value.
comment1 = \
    This example decodes subject and stores in decoded_subject \
    in decoded_subject.
example1 = \
    | decodeheader inputfield=subject outputfield=decoded_subject
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[makealerts-command]
syntax = makealerts (time=<field)? (entity=<field>)? (type=<string>)? (severity=<string>)? (idfield=<field>)? (<makealerts-combine-options>)?
alias =
shortdesc = Create an alert for each result from the piped input
description = \
    Create an alert for each result from the piped input. \
    Alerts should have a time, entity and type field. \
    If alert already exists with identical _time, entity, type and data, it will not be created. \
    They kvstore _key is returned in idfield if provided. \ 
    When using combine and combine_window, the alerts will be combined with previously created alerts  \
    with identical criteria (entity, type) within the specified time window (only supports hours or days).
comment1 = \
    This creates an alert of type test
example1 = \
    ... | makealerts time=_time entity=account type=test 
comment2 = \
    This creates an alert of type test and returns the kvstore key in the kv_key field
example2 = \
    ... | makealerts time=_time entity=account type=ioc idfield=kv_key 
comment2 = \
    This creates an alert of type test and returns the kvstore key in the kv_key field
example2 = \
    ... | makealerts time=_time entity=account type=ioc idfield=kv_key 
comment3 = \
    Combine alerts with same domain, ioc and src within 48 hours
example3 = \
    ... | makealerts time=_time entity=src type="DNS Malware" combine="domain,ioc" combine_window=48h
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[makealerts-combine-options]
syntax = combine=<string:comma-seperated-fields> combine_window=<string:hours>
description = combine alerts with same values for entity and combine field within combine_window

[listalerts-command]
syntax = listalerts <listalerts-status-option>? <listalerts-type-option>? \
    <listalerts-severity-option>? \
    <listalerts-analyst-option>? \
    <listalerts-data-option>? <listalerts-data_prefix-option>? <listalerts-json-option>?
alias =
shortdesc = List alerts
description = \
    List alerts, filter by status, optionally include data as fields or json.
comment1 = \
    List all alerts, expand data as fields prefixed by "data_" 
example1 = \
    | listalerts data_prefix="data_"
comment2 = \
    List open and assigned alerts, export data in field named jdata as json string
example2 = \
    | listalerts status="open,assigned" data=jdata
comment3 = \
    List all alerts, export entire record (including _time, data, status, work_log) in the record field as a json string
example3 = \
    | listalerts json=record
category = generating
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[listalerts-status-option]
syntax = status=<string>
description = limit list to the specific status (comma separated enclosed in double quotes)

[listalerts-type-option]
syntax = type=<string>
description = limit list to the specific types (comma separated enclosed in double quotes)

[listalerts-severity-option]
syntax = severity=<string>
description = limit list to the specific severity values (comma separated enclosed in double quotes)

[listalerts-analyst-option]
syntax = analyst=<string>
description = limit list to the specific analysts (comma separated enclosed in double quotes)

[listalerts-data-option]
syntax = data=<field>
shortdesc = include data as json in provided field
description = include data as json in provided field

[listalerts-data_prefix-option]
syntax = data_prefix=<string>
shortdesc = include data as fields with name prefixed with provided string
description = include data as fields with name prefixed with provided string

[listalerts-json-option]
syntax = json=<field>
shortdesc = include entire record as json in provided field
description = include entire record as json in provided field

[jsontofields-command]
syntax = jsontofields <jsontofields-json-option> <jsontofields-prefix-option>? <jsontofields-typeprefix-option>? <field>*
alias =
shortdesc = Expand a json string field into fields optionally prefixed by a string
description = \
    Expand a json string field into fields optionally prefixed by a string. \
    Fields that are strings are converted to string, \
    fields that are json objects are left are encoded back into string, \
    arrays are encoded as multi value fields of encoded json objects. \
    if typeprefix=t is provided, field names will be prefixed with a type indicator (default to typeprefix=f) \
    (i_)nteger, (f_)loat, (l_)ong, (j_)son, (a_)rray, (s_)tring.
comment1 = \
    this expands the data and work_log fields of the json data stored in the json_all fields
example1 = \
    | listalerts json=json_all | jsontofields json=json_all data work_log
comment2 = \
    This expands the work_log array field of json_all then converts each work_log entry into wl_time, wl_action
example2 = \
    | listalerts json=json_all | jsontofields json=json_all work_log | mvexpand work_log | \
    jsontofields json=work_log prefix=wl_ time, action | convert ctime(wl_time)
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[jsontofields-prefix-option]
syntax = prefix=<string>
description = Expanded field names are prefix with the provided string

[jsontofields-typeprefix-option]
syntax = typeprefix=<bool>
description = If true fields names are prefixed with a type indicator (i_)nteger, (f_)loat, (l_)ong, (j_)son, (a_)rray, (s_)tring

[jsontofields-json-option]
syntax = json=<field>
description = Expand provided fields into splunk fields

[fieldstojson-command]
syntax = fieldstojson <fieldstojson-json-option> <fieldstojson-prefix-option>
alias =
shortdesc = Combine fields into a single field as a json string.
description = \
    Combine fields with a typed prefix into a json string. \
    Fields are prefixed with two characters indicating the type and then the prefix provided by the prefix option. \
    Types supported are: \
    (i_)nteger, (f_)loat, (l_)ong, (j_)son, (a_)rray, (s_)tring.
comment1 = \
    Create a json string in the foo field from the fields l_data_bytes, i_data_status and s_data_user:
example1 = \
    index=_internal bytes=* | head 3 | rename user as s_data_user, status as i_data_status, bytes as l_data_bytes \
    | fieldstojson json=json prefix=data_ | table *_data_*, json 
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[fieldstojson-prefix-option]
syntax = prefix=<string>
description = fields to be combined must have the provided prefix with the type information

[fieldstojson-json-option]
syntax = json=<field>
description = The field receiving the json string

[updatealerts-command]
syntax = updatealerts (<updatealerts-replace-option> | <updatealerts-update-option>) <updatealerts-notes-option>?
alias =
shortdesc = Update alerts data
description = \
    Suitable for batch update.
comment1 = \
    This changes the type of the alerts
example1 = \
    | listalerts json=json | jsontofields json=json prefix=data_ typeprefix=t | eval s_data_type="ioc1" \
    | fieldstojson json=jsonnew prefix=data_ | updatealerts json=jsonnew
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[updatealerts-notes-option]
syntax = notes=<string>
description = a optional note to be added to the work_log

[updatealerts-replace-option]
syntax = json=<field>
description = fields containing the alert as a json string

[updatealerts-update-option]
syntax = key=<field> action=<string> status=<string>
description = field name containing the key, strings containing new status and action for work_log entry

[deletealerts-command]
syntax = deletealerts <deletealerts-json-option> <deletealerts-notes-option>?
alias =
shortdesc = Update alerts data
description = \
    Suitable for batch delete.
comment1 = \
    This changes the type of the alerts
example1 = \
    | listalerts json=json | deletealerts json=json notes="delete alerts"
category = streaming
appears-in = 0.1
maintainer = huyje
usage = public
tags = super_simple_siem

[deletealerts-notes-option]
syntax = notes=<string>
description = a optional note to be added to the work_log

[deletealerts-json-option]
syntax = json=<field>
description = fields containing the alert as a json string

